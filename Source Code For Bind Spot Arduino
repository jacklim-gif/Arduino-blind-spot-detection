#define trigPin1 4
#define echoPin1 5
#define ledPin1 13

#define trigPin2 2
#define echoPin2 3
#define ledPin2 12

#define trigPin3 6
#define echoPin3 7
#define ledPin3 11

#define trigPin4 8
#define echoPin4 9
#define ledPin4 10

#define buzzerPin A0 // Buzzer pin
#define buttonPin A1 // Button pin

long duration;
int distance1, distance2, distance3, distance4;

// Buzzer frequency and distance thresholds (in cm)
const int BUZZER_FREQ = 1000;
const int LED_DISTANCE = 30; // LEDs on at <= 30 cm
const int BUZZER_DISTANCE = 10; // Buzzer beeps at <= 10 cm

// Buzzer and button state
bool buzzerState = false; // Buzzer initially off
bool lastButtonState = HIGH;

void setup() {
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(ledPin1, OUTPUT);

  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(ledPin2, OUTPUT);

  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
  pinMode(ledPin3, OUTPUT);

  pinMode(trigPin4, OUTPUT);
  pinMode(echoPin4, INPUT);
  pinMode(ledPin4, OUTPUT);

  pinMode(buzzerPin, OUTPUT); // Set buzzer pin as output
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin with internal pull-up

  Serial.begin(9600);
  // Wait for sensor stabilization
  delay(1000);
  Serial.println("Ultrasonic Sensors, Buzzer, and Button Initialized");
}

int getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000); // Timeout after 30ms (~5m)
  int distance = duration == 0 ? -1 : (duration * 0.034 / 2); // Handle timeout
  return distance;
}

void loop() {
  // Read button state
  bool buttonState = digitalRead(buttonPin);

  // Check for button press (HIGH -> LOW transition)
  if (lastButtonState == HIGH && buttonState == LOW) {
    buzzerState = !buzzerState; // Toggle buzzer state
    if (buzzerState) {
      Serial.println("Buzzer Enabled");
    } else {
      noTone(buzzerPin); // Ensure buzzer is off when disabled
      Serial.println("Buzzer Disabled");
    }
    delay(50); // Debounce delay
  }
  lastButtonState = buttonState;

  // Measure distances for all sensors
  distance1 = getDistance(trigPin1, echoPin1);
  distance2 = getDistance(trigPin2, echoPin2);
  distance3 = getDistance(trigPin3, echoPin3);
  distance4 = getDistance(trigPin4, echoPin4);

  // Print distances
  Serial.print("S1: ");
  if (distance1 == -1) Serial.print("Error");
  else Serial.print(distance1);
  Serial.print(" cm | S2: ");
  if (distance2 == -1) Serial.print("Error");
  else Serial.print(distance2);
  Serial.print(" cm | S3: ");
  if (distance3 == -1) Serial.print("Error");
  else Serial.print(distance3);
  Serial.print(" cm | S4: ");
  if (distance4 == -1) Serial.print("Error");
  else Serial.print(distance4);
  Serial.println(" cm");

  // Sensor 1 LED control
  if (distance1 <= LED_DISTANCE && distance1 != -1) {
    digitalWrite(ledPin1, HIGH); // LED on pin 13
  } else {
    digitalWrite(ledPin1, LOW);
  }

  // Sensor 2 LED control
  if (distance2 <= LED_DISTANCE && distance2 != -1) {
    digitalWrite(ledPin2, HIGH); // LED on pin 12
  } else {
    digitalWrite(ledPin2, LOW);
  }

  // Sensor 3 LED control (affects only ledPin4)
  if (distance3 <= LED_DISTANCE && distance3 != -1) {
    digitalWrite(ledPin4, HIGH); // Turn on LED on pin 10
  } else {
    // ledPin4 is controlled by Sensor 4 below
  }

  // Sensor 4 LED control (affects ledPin3 and ledPin4)
  if (distance4 <= LED_DISTANCE && distance4 != -1) {
    digitalWrite(ledPin3, HIGH); // Turn on LED on pin 11
    digitalWrite(ledPin4, HIGH); // Turn on LED on pin 10
  } else {
    digitalWrite(ledPin3, LOW); // Turn off LED on pin 11
    // Only turn off ledPin4 if Sensor 3 doesn't need it on
    if (!(distance3 <= LED_DISTANCE && distance3 != -1)) {
      digitalWrite(ledPin4, LOW);
    }
  }

  // Buzzer control: beep only if enabled and any sensor's distance is <= 10 cm
  if (buzzerState && 
      ((distance1 <= BUZZER_DISTANCE && distance1 != -1) ||
       (distance2 <= BUZZER_DISTANCE && distance2 != -1) ||
       (distance4 <= BUZZER_DISTANCE && distance4 != -1))) {
    tone(buzzerPin, BUZZER_FREQ); // Beep at 1000 Hz
  } else {
    noTone(buzzerPin); // Turn off buzzer
  }

  delay(200); // Delay to prevent echo interference
}
